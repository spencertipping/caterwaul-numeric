Vector math library | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This module provides various functions for doing vector math. It is more oriented towards generating new values than it is towards solving equations. It represents all matrices and vectors as
arrays that can be manipulated with the sequence macro library. This representation is not particularly fast when used directly, but the accompanying numerical compiler can reduce memory
allocation to improve performance significantly. All operations in this library are nondestructive; this makes the library implicitly SSA-friendly.

Matrices are represented as nested arrays in row-major order. This means that x[1][2] returns the entry in the second row, third column. All matrices have the invariant that they are properly
rectangular; that is, all row arrays are the same length.

  Interface.
  This vector library generalizes to an arbitrary number of coordinates, but the compiled code contains no loops. Instead, you instantiate an N-dimensional copy of the library and it compiles
  specialized functions. So, for example, the compiled function for componentwise addition in three-dimensional space is vplus(a, b) = [a[0] + b[0], a[1] + b[1], a[2] + b[2]]. Generally you'd
  combine this with a using[] macro to eliminate duplicate compilation:

  | reflect(a, normal) = a /-vproj/ normal /-vscale/ -2 /-vplus/ a,
    using [caterwaul.vector(3, 'v')]

  If you're using multiple dimensions at once, you can customize the prefix to distinguish the functions:

  | using [caterwaul.merge({}, caterwaul.vector(3, 'v3'), caterwaul.vector(4, 'v4'))]

caterwaul.module('vector', 'js_all', function ($) {
  $.vector = generator(base_v, composite_v) /-$.merge/ capture[scalar_field = scalar_field, complex_field = complex_field, v3cross = v3cross],

  where [generator(base, composite)(n, prefix, field) = {} /compiled_base /-$.merge/ composite(compiled_base, f) /-rename/ prefix -where [f             = field || scalar_field,
                                                                                                                                          compiled_base = base(n, f)],
         rename(o, prefix)        = o %k*['#{prefix || ""}#{x}'] -seq,

         compile_function(xs, e)  = '(function (_formals) {return _e})'.qs /~replace/ {_formals: xs, _e: e} /!$.compile -se [it.tree = e],

         scalar_field             = {zero: '0'.qs, one: '1'.qs, '+': '_x + _y'.qs, '-': '_x - _y'.qs, '*': '_x * _y'.qs, '/': '_x / _y'.qs, 'u~': 'Math.sqrt(_x)'.qs},
         complex_field            = {zero:  '{r: 0, i: 0}'.qs, one: '{r: 1, i: 0}'.qs,
                                     '+':  '{r: _x.r + _y.r,                                              i: _x.i + _y.i}'.qs,
                                     '-':  '{r: _x.r - _y.r,                                              i: _x.i - _y.i}'.qs,
                                     '*':  '{r: _x.r * _x.r - _x.i * _y.i,                                i: 2 * _x.i * _y.i}'.qs,
                                     '/':  '{r: (_x.r*_y.r + _x.i*_y.i) / (_y.r*_y.r + _y.i*_y.i),        i: (_x.i*_y.r - _x.r*_y.i) / (_y.r*_y.r + _y.i*_y.i)}'.qs,
                                     'u~': '{r: Math.sqrt((Math.sqrt(_x.r*_x.r + _x.i*_x.i) + _x.r) / 2), i: Math.sqrt((Math.sqrt(_x.r*_x.r + _x.i*_x.i) - _x.r) / 2)}'.qs},

         field_rewrite(e, field)  = e /~pmap/ visit -where [pattern_for(s) = /^\w+$/.test(s) ? $.parse(s) : /^u/.test(s) ? $.parse('#{s /~substr/ 1}_x') : $.parse('_x #{s} _y'),
                                                            patterns       = field /pairs *[[x[0], pattern_for(x[0])]] /object -seq,
                                                            visit(node)    = field /~hasOwnProperty/ node.data ? replace(node, patterns[node.data]) : node,
                                                            replace(n, p)  = template /~replace/ match -where [template = field[n.data], match = p /~match/ n]],

         v3cross(field)           = 'a, b'.qs /-compile_function/ field_rewrite('[a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]]'.qs, field),

Vector functions.
Each function is implemented in terms of its structure. Simple componentwise functions are specified by providing an expression to use for each component, where a wildcard 'i' will be replaced
by the index of that coordinate. This expression is then used in a reduction, which is some structure that combines components into a single value. For example, this is the reduction for
'plus':

| plus = reduction(3,                   // <- number of dimensions
                   'a, b'.qs,           // <- formal parameters, quoted as syntax
                   '[x]'.qs,            // <- result expression
                   'x, y'.qs,           // <- binary combination of intermediate values
                   'a[i] + b[i]'.qs)    // <- componentwise combination

Most simple vector functions can be defined this way. Others, however, are better defined in terms of each other; for instance, the 'proj' and 'orth' functions never access the vectors
directly since they are defined in terms of the dot product and vector-scalar multiplication. The obvious solution is to first create the reduction functions and then define things like 'proj'
and 'orth' to close over them; however, this is problematic from a compilation perspective since we would need the closure state to know the dimension of 'proj' and 'orth'. To compensate, the
syntax tree is stored as an attribute of the compiled function, and the syntax tree contains refs which bind all closure dependencies.

  Defining alternative componentwise semantics.
  An extra parameter, 'field', lets you redefine algebraic field operations. This can be useful if you want to build vectors or matrices over non-scalar data structures. In particular, if you
  specify this parameter you'll need to provide replacements for +, -, *, /, and optionally a square root function, which is counterintuitively denoted as a unary one's complement. Your field
  must also define zero and one. Here's an example for working with complex numbers:

  | my_field = {zero: '{r: 0, i: 0}'.qs,
                one:  '{r: 1, i: 0}'.qs,
                '+':  '{r: _x.r + _y.r, i: _x.i + _y.i}'.qs,
                '-':  '{r: _x.r - _y.r, i: _x.i - _y.i}'.qs,
                '*':  '{r: _x.r * _x.r - _x.i * _y.i, i: 2 * _x.i * _y.i}'.qs,
                '/':  '{r: (_x.r*_y.r + _x.i*_y.i) / (_y.r*_y.r + _y.i*_y.i), i: (_x.i*_y.r - _x.r*_y.i) / (_y.r*_y.r + _y.i*_y.i)}'.qs,
                'u~': '{r: Math.sqrt((Math.sqrt(_x.r*_x.r + _x.i*_x.i) + _x.r) / 2), i: Math.sqrt((Math.sqrt(_x.r*_x.r + _x.i*_x.i) - _x.r) / 2)}'.qs}

  These expressions will then replace the real-number field used by default. Note here that the complex conjugate operation has duplicated subexpressions; _y.r*_y.r + _y.i*_y.i is computed
  twice. This won't be a problem in the compiled function because all of the expressions are subject to common subexpression elimination prior to being compiled. Because of this optimization,
  it's very important that any side-effects of each subexpression be idempotent and commutative.

  You can reuse existing functions as well as defining them on the fly. You should do this using syntax refs:

  | my_field = {'+': 'f(_x, _y)'.qs.replace({f: new caterwaul.ref(my_function)}), ...}

  If you want your functions to be optimized, then you should define them with a '.tree' attribute that points to the syntax tree of their return value. This lets optimization stages access
  their closure state and potentially eliminate the function call altogether.

         base_v(n, field)         = capture [plus  = r(n, 'a, b'.qs, '[x]'.qs, 'x, y'.qs, 'a[i] + b[i]'.qs),  times = r(n, 'a, b'.qs, '[x]'.qs, 'x, y'.qs, 'a[i] * b[i]'.qs),
                                             minus = r(n, 'a, b'.qs, '[x]'.qs, 'x, y'.qs, 'a[i] - b[i]'.qs),  scale = r(n, 'a, b'.qs, '[x]'.qs, 'x, y'.qs, 'a[i] * b'.qs),
                                             dot   = r(n, 'a, b'.qs, 'x'.qs, 'x + y'.qs, 'a[i] * b[i]'.qs),   norm  = r(n, 'a'.qs, '~(x)'.qs, 'x + y'.qs, 'a[i] * a[i]'.qs),

                                             macv  = r(n, 'a, b, c'.qs, '[x]'.qs, '[x, y]'.qs, 'a[i] + b[i] * c[i]'.qs),
                                             macs  = r(n, 'a, b, c'.qs, '[x]'.qs, '[x, y]'.qs, 'a[i] + b * c[i]'.qs)]

                            -where [r(n, formals, wrap, fold, each) = formals /-compile_function/ specialized
                                                              -where [body        = wrap /~replace/ {x: n[n] *[each /~replace/ {i: '#{x}'}] /[fold /~replace/ {x: x0, y: x}] -seq},
                                                                      specialized = body /-field_rewrite/ field]],

         composite_v(base, field) = capture [unit = ref_compile(base, 'a'.qs,    'scale(a, one / norm(a))'.qs),
                                             proj = ref_compile(base, 'a, b'.qs, 'scale(b, dot(a, b) / dot(b, b))'.qs),
                                             orth = ref_compile(base, 'a, b'.qs, 'minus(a, scale(b, dot(a, b) / dot(b, b)))'.qs)]

                            -where [ref_compile(functions, formals, body) = formals /-compile_function/ new_body
                                                                    -where [specialized = body /-field_rewrite/ field,
                                                                            new_body    = specialized |~replace| functions %v*[new $.ref(x)] -seq]]]});
